syntax = "proto3";

package narwhal_gateway;

message Proposal {
    bytes EthereumBlock = 1;
}
message ProposalResponse {
    string SuccessOrFail = 1;
}

message Certificate {
    bytes Header = 1;
    bytes AggregatedSignature = 2;
}

// Each Payload represents a committed ethereum block
message Batch {
    bytes Payload = 1;
}

message CertificateAndBatch {
    Certificate Certificate = 1;
    Batch Batch = 2;
}

message CommittedSubDag {
    /// The sequence of committed certificates.
    repeated Certificate Certificates = 1;

    /// The leader certificate responsible of committing this sub-dag.
    bytes LeaderCertificate = 2;

    // SequenceNumber is the order determined in Narwhal
    uint64 SequenceNumber = 3;
}

/// The output of Consensus, which includes all the batches for each certificate in the sub dag
/// It is sent to the the Adapter to execute using EVM
message ConsensusOutput {
    CommittedSubDag SubDag = 1;
    repeated CertificateAndBatch Batches = 2;
}

message SubscribeConsensusOutputRequest {
    string RequestorId = 1;
}

message DeliverConsensusOutputResponse {
    string Resp = 1;
}

// NarwhalGateway is a bridge between Ethereum(Execution) and Narwhal(Consensus) 
// i.e., executing narwhal-ordered Txs in EVM
service NarwhalGateway {
    // SubmitTransaction is invoked by Ethereum Geth to submit Tx
    rpc SubmitTransaction(Proposal) returns (ProposalResponse);

    // SubscribeConsensusOutput is invoked by Geth to subsribe ConsensusOutput 
    rpc SubscribeConsensusOutput(SubscribeConsensusOutputRequest) returns (stream ConsensusOutput);

    // DeliverConsensusOutput is invoked by NarwhalNode to deliver ConsensusOutput
    rpc DeliverConsensusOutput(ConsensusOutput) returns (DeliverConsensusOutputResponse);
}

